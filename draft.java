/*
 april 23rd | 15


You are to create a program that allows the user to create an Ontology. Your Ontology application should:

 

    [X]1. Allow the user to create a super (main) concept.

 

    2. Allow the user to add sub concepts to any concept.

 

    3. Add parent concepts to any concept other than the super concept.

 

    4. Remove any concepts other than the super concept. The user should be allowed to chose as whether to remove only the concept in question or that concept and all of its sub concepts.

 

    5. Ensure that none of the sub concepts are identical to parent concepts.

 

    If the program displays only in command prompt, maximum marks will be 25;

 

    Full guided user interface (GUI) is required for full marks (30).  

 */

/*  -------------------------------------------------------------------------REFERENCE----------------------------------------------------------------------------------

HOW TO display a jgraph in a jpanel/jframe : http://stackoverflow.com/questions/3925103/how-best-to-display-jgraphx

jButton with Popup Menu : http://stackoverflow.com/questions/1692677/how-to-create-a-jbutton-with-a-menu


inserting a graphcomponent into a scrollpanel : http://stackoverflow.com/questions/13555257/using-jscrollpane-with-jgraphx

^inserting a graphcomponent into a scrollpane VIEWPORT : http://stackoverflow.com/questions/15052731/jscrollpane-doesnt-add-components

provide action listener for node : http://forum.jgraph.com/questions/252/add-listener-when-clicking-on-a-vertex

checks items in the arraylist while ignoring the case : http://stackoverflow.com/questions/8751455/arraylist-contains-case-sensitivity

add image into netbeans : https://www.youtube.com/watch?v=fwiBilSLnS0

auto-organize cells and bi-directional edges : http://stackoverflow.com/questions/5603306/jgraphx-auto-organise-of-cells-and-bidirectional-edges



*/

package com.mxgraph.examples.swing;

import javax.swing.JFrame;

import com.mxgraph.swing.mxGraphComponent;
import com.mxgraph.view.mxGraph;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;

import java.util.*;



public class draft extends javax.swing.JFrame {

    /**
     * Creates new form draft
     */
    
    
    public draft() {
        initComponents();
    }
    
    
    
   

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addConceptFrame = new javax.swing.JFrame();
        newConceptName = new javax.swing.JTextField();
        addConceptTitle = new javax.swing.JLabel();
        addConceptButton2 = new javax.swing.JButton();
        redundantConceptDialog = new javax.swing.JDialog();
        redundantConceptLabel = new javax.swing.JLabel();
        whichNodeDialog = new javax.swing.JDialog();
        whichNodeDialogLabel1 = new javax.swing.JLabel();
        whichNodeDialogLabel2 = new javax.swing.JLabel();
        whichNodeDialogLabel3 = new javax.swing.JLabel();
        scrollPanel = new javax.swing.JScrollPane();
        buttonPanel = new javax.swing.JPanel();
        addConceptButton = new javax.swing.JButton();
        removeConceptButton = new javax.swing.JButton();
        removeConceptAndSubconceptButton = new javax.swing.JButton();

        addConceptFrame.setTitle("Add a Concept");
        addConceptFrame.setMinimumSize(new java.awt.Dimension(330, 180));
        addConceptFrame.setResizable(false);

        addConceptTitle.setText("Name of concept");

        addConceptButton2.setText("Add");
        addConceptButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addConceptButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout addConceptFrameLayout = new javax.swing.GroupLayout(addConceptFrame.getContentPane());
        addConceptFrame.getContentPane().setLayout(addConceptFrameLayout);
        addConceptFrameLayout.setHorizontalGroup(
            addConceptFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addConceptFrameLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(addConceptFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(addConceptButton2)
                    .addGroup(addConceptFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(newConceptName, javax.swing.GroupLayout.PREFERRED_SIZE, 287, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(addConceptTitle)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        addConceptFrameLayout.setVerticalGroup(
            addConceptFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addConceptFrameLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(addConceptTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(newConceptName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(addConceptButton2)
                .addContainerGap(46, Short.MAX_VALUE))
        );

        addConceptTitle.getAccessibleContext().setAccessibleName("addConceptLabel");

        redundantConceptDialog.setTitle("Warning");
        redundantConceptDialog.setMinimumSize(new java.awt.Dimension(200, 100));

        redundantConceptLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        redundantConceptLabel.setText("Redundant concept! ");

        javax.swing.GroupLayout redundantConceptDialogLayout = new javax.swing.GroupLayout(redundantConceptDialog.getContentPane());
        redundantConceptDialog.getContentPane().setLayout(redundantConceptDialogLayout);
        redundantConceptDialogLayout.setHorizontalGroup(
            redundantConceptDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(redundantConceptDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(redundantConceptLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(34, Short.MAX_VALUE))
        );
        redundantConceptDialogLayout.setVerticalGroup(
            redundantConceptDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(redundantConceptDialogLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(redundantConceptLabel)
                .addContainerGap(16, Short.MAX_VALUE))
        );

        whichNodeDialog.setTitle("Note");
        whichNodeDialog.setMinimumSize(new java.awt.Dimension(400, 214));

        javax.swing.GroupLayout whichNodeDialogLayout = new javax.swing.GroupLayout(whichNodeDialog.getContentPane());
        whichNodeDialog.getContentPane().setLayout(whichNodeDialogLayout);
        whichNodeDialogLayout.setHorizontalGroup(
            whichNodeDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(whichNodeDialogLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(whichNodeDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(whichNodeDialogLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 342, Short.MAX_VALUE)
                    .addComponent(whichNodeDialogLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 342, Short.MAX_VALUE)
                    .addComponent(whichNodeDialogLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(34, Short.MAX_VALUE))
        );
        whichNodeDialogLayout.setVerticalGroup(
            whichNodeDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(whichNodeDialogLayout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(whichNodeDialogLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(whichNodeDialogLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(whichNodeDialogLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(57, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Ontology");

        buttonPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Options"));

        addConceptButton.setText("Add a concept");
        addConceptButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addConceptButtonActionPerformed(evt);
            }
        });

        removeConceptButton.setText("Remove a concept");
        removeConceptButton.setEnabled(false);
        removeConceptButton.setOpaque(false);

        removeConceptAndSubconceptButton.setText("Remove a concept and its subconcepts");
        removeConceptAndSubconceptButton.setEnabled(false);

        javax.swing.GroupLayout buttonPanelLayout = new javax.swing.GroupLayout(buttonPanel);
        buttonPanel.setLayout(buttonPanelLayout);
        buttonPanelLayout.setHorizontalGroup(
            buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buttonPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(removeConceptButton, javax.swing.GroupLayout.PREFERRED_SIZE, 531, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(removeConceptAndSubconceptButton, javax.swing.GroupLayout.PREFERRED_SIZE, 531, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addConceptButton, javax.swing.GroupLayout.PREFERRED_SIZE, 531, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(26, Short.MAX_VALUE))
        );
        buttonPanelLayout.setVerticalGroup(
            buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buttonPanelLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(addConceptButton)
                .addGap(18, 18, 18)
                .addComponent(removeConceptButton)
                .addGap(18, 18, 18)
                .addComponent(removeConceptAndSubconceptButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(buttonPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(scrollPanel))
                .addContainerGap(21, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addComponent(scrollPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 309, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                .addComponent(buttonPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

 
    
    private void addConceptButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addConceptButtonActionPerformed
        // TODO add your handling code here:
        
        //make a frame appear when the Add Concept Button is pressed
        
       addConceptFrame.setVisible(true);
              
    }//GEN-LAST:event_addConceptButtonActionPerformed
    
    
    
    //initially, there's no superconcept
    boolean superConcept = false;
    
    //placing these two variables outside of the the method below
        mxGraphComponent graphComponent;
        
        mxGraph graph;
        
        String superConceptName = "";
        
        
        //stores all the concept in string form. to make things easier, no duplication is allowed.
        ArrayList <String> listOfConcept = new ArrayList <> (); 
    
    private void addConceptButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addConceptButton2ActionPerformed
        
        
        //compiler was so hung up on this. just added 'final' for the sake of it. 
        final String conceptName = newConceptName.getText();
        
        //and close the previous frame which user just entered the new concept name
        
        addConceptFrame.setVisible(false);
        
        
        
        if(!superConcept)       //if there's no superconcept, just ask the user to input the concept's name, and no prompt for which node to be the parent
        {
        
                graph = new mxGraph();
                
                //the default parent is an invisible cell.....or so the manual said
            
		Object parent = graph.getDefaultParent();

		graph.getModel().beginUpdate();
		try
		{
			
			Object v1 = graph.insertVertex(parent, null,  conceptName, 200, 150,
					80, 60, "shape=ellipse;perimeter=ellipsePerimeter");
			
                        superConceptName = conceptName;
                        
                        //and add the super concept to the list of concept array.
                        //remember to do this only when the graph is updated, 
                        //cause user could cancel their action at any time.
                        
                        listOfConcept.add(superConceptName);
			
		}
		finally
		{
			graph.getModel().endUpdate();
		}
                
                //add stuff to the scroll panel
                

            graphComponent = new mxGraphComponent(graph);
            
            scrollPanel.setViewportView(graphComponent);
            
            superConcept = true;

                                            
            //after there's a concept in the scroll panel, THEN the remove buttons are enabled	
        
        removeConceptButton.setEnabled(true);
        
        removeConceptAndSubconceptButton.setEnabled(true);
        
        //disable the editable-property of the graph. user is supposed to edit the graph using the provided GUI, and nothing else.
        
        graphComponent.setEnabled(false);
        
        //close the addConceptFrame
        
        addConceptFrame.setVisible(false);
        
        }
        
        
        
        else         //if there's already existing superConcept in the scrollpanel, ask user to choose which node to be the parent node.
        {
            
            
            //check whether the concept is already in the list of superconcept in string form. also, ignore the case.
            if(containsIgnoreCase(conceptName, listOfConcept))  //redundant input
                
            {
                
                redundantConceptDialog.setVisible(true);
                
                
            }
            
            
            
            //the user input isn't redundant
            else {
            //disable the other buttons as usual......except that they're not disabled at all. why....? 
            
                
            removeConceptButton.setEnabled(false);
        
            removeConceptAndSubconceptButton.setEnabled(false);
                        
            
 
            
            whichNodeDialog.setVisible(true);
            
            whichNodeDialogLabel1.setText("Please select the node that you would like " + conceptName +  " to be parent to.");
            
            whichNodeDialogLabel2.setText("Please note that " + conceptName + " cannot be the parent node to " + superConceptName + ".");

            whichNodeDialogLabel3.setText("If you click on " + superConceptName + ", " + conceptName + " will be the child node to " + superConceptName + ".");
        
        //NOTE : it works. just that the hover arrow thing doesn't turn into a hand like the one ClickHandler.java because  graphComponent.setEnabled(false)
        //which was set to disable cause it's annoying to have nodes to be movable and edges created

            
            graphComponent.getGraphControl().addMouseListener(new MouseAdapter()
		{
		
			public void mouseReleased(MouseEvent e)
			{
				Object cell = graphComponent.getCellAt(e.getX(), e.getY());
				
				if (cell != null)
				{
                                    
                                    //this is the parent's cell's concept
                                    String parentConcept = graph.getLabel(cell);
                                    
                                    
                                    System.out.println("\n\ncell="+ parentConcept);
                                    
                                    //NOTE : the number sorta came out weird. e.g. initially 0 is correct, but when it's supposed to display 1, 
                                    //it displays 2 instead.......it's cause the method considers the 'edge' as a child cell too. fix this.
                                    //SOLVED : bahagi 2. done.                                   
                                    System.out.println(parentConcept + "'s number of children : " + graph.getModel().getChildCount(cell)/2);

                                   //the objective here is to get the children node of the selected cell,
                                    //and store the children nodes in an array
                                    Object [] children =  graph.getChildVertices(cell);
                                    
                                    //view which the children cell of the selected cell
                                    
                                    System.out.println(parentConcept + "'s children nodes are : ");
                                    
                                    for(int i = 0; i <children.length; i++)
                                    
                                    {
                                    
                                    //System.out.println(Arrays.toString(children));        //doesn't work
                                        
                                        System.out.println(graph.getLabel(children[i]));
                                    
                                    }
                                    
                                    //if the selected node is the super concept, then place the new concept
                                    //under the super concept.
                                    
                                    if(parentConcept.equalsIgnoreCase(superConceptName))
                                        
                                    {
                                        
                                        

                                        graph.getModel().beginUpdate();
                                        try
                                        {

                                                Object newNode = graph.insertVertex(cell, null,  conceptName, 200, 150,
                                                                80, 60, "shape=ellipse;perimeter=ellipsePerimeter");

                                                Object edge = graph.insertEdge(cell, null, "", cell, newNode,
					"edgeStyle=elbowEdgeStyle;elbow=horizontal;orthogonal=0;"
							+ "entryX=0;entryY=0;entryPerimeter=1;");

                                                //and add the super concept to the list of concept array.
                                                //remember to do this only when the graph is updated, 
                                                //cause user could cancel their action at any time.

                                                listOfConcept.add(conceptName);
                                                
                                                graph.setAutoSizeCells(true);

                                        }

                                        finally
                                        {
                                                graph.getModel().endUpdate();
                                        }

                                        //add stuff to the scroll panel
                                        
                                        //NOTE : figure out how to automatically configure the graph


                                        graphComponent = new mxGraphComponent(graph);
                                                                                
                                        scrollPanel.setViewportView(graphComponent);
                                        
                                        //the usuals : re-enabled the other buttons
                                        
                                        removeConceptButton.setEnabled(true);
        
                                         removeConceptAndSubconceptButton.setEnabled(true);
                                         
                                         //disable the editable-property of the graph. user is supposed to edit the graph using the provided GUI, and nothing else.
        
                                        //graphComponent.setEnabled(false);

                                        whichNodeDialog.setVisible(false);

                                        
                                    }
                                                                                                                
                                                                                           
                                                                                             
                                    //else, place the selected node under the new concept aka
                                    //the new concept becomes the parent node of the selected node.
                                    
                                    else
                                        
                                    {
                                        
                                        //get the top cell and bottom (selected) cell, insert new node in between.
                                        //most prolly re-arranging of edges
                                        
                                        
                                        
                                        
                                    }
                                    
                                                                                                 
                                                                                                 
                                                                                             
                                                                                                              
				}
                                
                                                                        
                                
                                
			}
		});
            
            
            
            
        }}
        
    }//GEN-LAST:event_addConceptButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(draft.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(draft.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(draft.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(draft.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new draft().setVisible(true);
            }
        });
        
        
    }
    
    //added function to check for redundancy while ignoring the case of the input. THAT MAKES SENSE 
    
    public boolean containsIgnoreCase(String str, ArrayList<String> list){
    for(String i : list){
        if(i.equalsIgnoreCase(str))
            return true;
    }
    return false;
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addConceptButton;
    private javax.swing.JButton addConceptButton2;
    private javax.swing.JFrame addConceptFrame;
    private javax.swing.JLabel addConceptTitle;
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JTextField newConceptName;
    private javax.swing.JDialog redundantConceptDialog;
    private javax.swing.JLabel redundantConceptLabel;
    private javax.swing.JButton removeConceptAndSubconceptButton;
    private javax.swing.JButton removeConceptButton;
    private javax.swing.JScrollPane scrollPanel;
    private javax.swing.JDialog whichNodeDialog;
    private javax.swing.JLabel whichNodeDialogLabel1;
    private javax.swing.JLabel whichNodeDialogLabel2;
    private javax.swing.JLabel whichNodeDialogLabel3;
    // End of variables declaration//GEN-END:variables
}
